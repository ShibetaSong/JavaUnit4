package com.shibeta.unit4.day09.xml;

public class demo1 {
/*
* 可扩展标记语言 extensible Markup Language
* 具有平台无关性，独立
* 具有自我描述性
* XML语言不是狭隘的XML文件
*
*
* 1.文档说明
* <?xml version="1.0" encoding="UTF-8"?>

* 2. 标记( 元素/ 标签/ 节点)
*   XML文档由一个个的标记组成
*   开始标记(开放标记) : <标记名称>
*   结束标记(闭合标记): </标记名称>
*   标记名称：自定义名称必须遵循以下命名规范:
*       1. 可以包含字母、数字以及其他字符
*       2. 不能以数字和标点符号开始
*       3. 不能以字符xml开始
*       4. 不能包含空格和冒号
*       5. 名称区分大小写
*   标记内容：开始标记与结束标记之间
*
* 3. 一个xml文档中，必须有且仅有一个根标记
* 4. 标记可以嵌套，但不能交叉
* 5. 层次称呼：子标记、父标记、兄弟标记、后代标记、祖先标记
* 6. 标记名称允许重复
* 7. 标记中还有属性，由属性名和属性值组成，键值对之间使用等号连接。
* 属性值必须用引号引住, 多个属性使用空格隔开
* <person id="10012" group="213">
* </person>
*
* 8. 注释不能写在文档声明前，不能嵌套 <!--  -->

* CDATA 不被解析器解析的文本数据
* 某些文本包含大量的< 或 & 字符，应该定义为CDATA
*
*
* 问: Java中有几种XML解析方式 ? 分别是什么 ? 有什么样的优缺点 ?
答: 四种.
1. SAX解析
解析方式是事件驱动机制 !
SAX解析器, 逐行读取XML文件解析 , 每当解析到一个标签的开始/结束/内容/属性时,触
发事件.
我们可以编写程序在这些事件发生时, 进行相应的处理.
优点:
分析能够立即开始，而不是等待所有的数据被处理
逐行加载,节省内存.有助于解析大于系统内存的文档
有时不必解析整个文档,它可以在某个条件得到满足时停止解析.
缺点:
1. 单向解析，无法定位文档层次，无法同时访问同一文档的不同部分数据(因为逐
行解析, 当解析第n行是, 第n-1行已经被释放了, 无法在进行操作了).
2. 无法得知事件发生时元素的层次, 只能自己维护节点的父/子关系.
3. 只读解析方式, 无法修改XML文档的内容.
2. DOM解析
是用与平台和语言无关的方式表示XML文档的官方W3C标准，分析该结构通常需要加载整个
文档和内存中建立文档树模型.程序员可以通过操作文档树, 来完成数据的获取 修改 删除等.
优点:
文档在内存中加载, 允许对数据和结构做出更改.
访问是双向的，可以在任何时候在树中双向解析数据。
缺点:
文档全部加载在内存中 , 消耗资源大.
3. JDOM解析
目的是成为Java特定文档模型，它简化与XML的交互并且比使用DOM实现更快。由于是第一
个Java特定模型，JDOM一直得到大力推广和促进。
JDOM文档声明其目的是“使用20%（或更少）的精力解决80%（或更多）Java/XML问题”
（根据学习曲线假定为20%）
优点:
使用具体类而不是接口，简化了DOM的API。
大量使用了Java集合类，方便了Java开发人员。
缺点:
    没有较好的灵活性。
    性能不是那么优异。
4. DOM4J解析
它是JDOM的一种智能分支。它合并了许多超出基本XML文档表示的功能，包括集成的XPath
支持、XML Schema支持以及用于大文档或流化文档的基于事件的处理。它还提供了构建文档表示的选项，
DOM4J是一个非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一
个开放源代码的软件。如今你可以看到越来越多的Java软件都在使用DOM4J来读写XML。
目前许多开源项目中大量采用DOM4J , 例如:Hibernate

* */

    /*
    sax 解析: 逐行解析
        可以立刻开始，节省内存，有时不必解析整个文档
        单项解析，无法定位文档层次，无法同时访问同一文档的不同部分数据
        只读，无法修改

    dom 解析: 将文档全部存储在内存中，再访问
        在内存中加载，允许对数据结构做出更改
        访问是双向的
        文档全部加载在内存中，消耗资源大

    JDOM解析：
        使用具体类而不是接口，简化了DOM的API
        大量使用了Java集合类
        没有较好的灵活性
        性能不是很优异

    DOM4J解析:
        是JDOM的一个分支，支持XPath
        性能优异，功能强大，极端易用
     */
}
